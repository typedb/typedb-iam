#
# Copyright (C) 2022 Vaticle
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

define

company sub entity,
    owns name,
    plays company-membership:company;

company-membership sub relation,
    relates company,
    relates member;

parent-company-name sub attribute,
    value string;

#rule attribute-parent-company:
#    when {
#        (company: $c, member: $t) isa company-membership;
#        $c has name $c-name;
#        ?name-value = $c-name
#    } then {
#        $t has parent-company-name ?name-value;
#    };

rule attribute-parent-company:
    when {
        (company: $c, member: $t) isa company-membership;
        $c has name $c-name;
        $pc isa parent-company-name;
        $c-name = $pc;
    } then {
        $t has $pc;
    };

root-collection sub attribute,
    value boolean;

rule automatic-member-collection:
    when {
        $c isa resource-collection;
        (member: $c) isa collection-membership;
    } then {
        $c has root-collection false;
    };

rule automatic-root-collection:
    when {
        $c isa resource-collection;
        not {
            $c has root-collection false;
        };
    } then {
        $c has root-collection true;
    };

subject sub entity,
    abstract,
    owns parent-company-name,
    owns credential,
    plays company-membership:member,
    plays group-membership:member,
    plays group-ownership:owner,
    plays object-ownership:owner,
    plays permission:subject,
    plays change-request:requester,
    plays change-request:requestee,
    plays segregation-violation:subject;

user sub subject,
    abstract;

user-group sub subject,
    abstract,
    plays group-membership:group,
    plays group-ownership:group,
    plays group-maximisation-violation:group;

object sub entity,
    abstract,
    owns parent-company-name,
    owns object-type,
    plays company-membership:member,
    plays collection-membership:member,
    plays object-ownership:object,
    plays access:object,
    plays segregation-violation:object;

resource sub object,
    abstract;

resource-collection sub object,
    abstract,
    owns root-collection,
    plays collection-membership:collection;

action sub entity,
    abstract,
    owns parent-company-name,
    owns name,
    owns object-type,
    plays company-membership:member,
    plays set-membership:member,
    plays access:action,
    plays segregation-policy:action;

operation sub action;

operation-set sub action,
    plays set-membership:set;

membership sub relation,
    # abstract,
    relates parent,
    relates member;

group-membership sub membership,
    relates group as parent;

collection-membership sub membership,
    relates collection as parent;

set-membership sub membership,
    relates set as parent;

ownership sub relation,
    # abstract,
    relates owned,
    relates owner;

group-ownership sub ownership,
    relates group as owned,
    owns ownership-type;

object-ownership sub ownership,
    relates object as owned,
    owns ownership-type;

access sub relation,
    relates object,
    relates action,
    plays permission:access,
    plays change-request:change;

permission sub relation,
    relates subject,
    relates access,
    owns review-date,
    owns validity,
    plays permission-maximisation-violation:permission;

direct-permission sub permission;
inherited-permission sub permission;

change-request sub relation,
    relates requester,
    relates requestee,
    relates change;

segregation-policy sub relation,
    relates action,
    owns name,
    plays segregation-violation:policy;

violation sub relation,
    abstract;

segregation-violation sub violation,
    relates subject,
    relates object,
    relates policy;

maximization-violation sub violation,
    abstract;

permission-maximisation-violation sub maximization-violation,
    relates permission;

group-maximisation-violation sub maximization-violation,
    relates group;

credential sub attribute,
    value string;

object-type sub attribute,
    value string;

ownership-type sub attribute,
    value string;

review-date sub attribute,
    value datetime;

validity sub attribute,
    value boolean;

person sub user,
    owns full-name,
    owns email;

business-unit sub user-group,
    owns name;

user-role sub user-group,
    owns name;

user-account sub user-group,
    owns email;

file sub resource,
    owns path,
    owns size-kb;

interface sub resource,
    owns name;

record sub resource,
    owns number;

directory sub resource-collection,
    owns path,
    owns size-kb;

application sub resource-collection,
    owns name;

database sub resource-collection,
    owns name;

table sub resource-collection,
    owns name;

id sub attribute,
    abstract,
    value string;

email sub id,
    value string;

name sub id,
    value string;

path sub id,
    value string;

number sub id,
    value string;

full-name sub attribute,
    value string;

size-kb sub attribute,
    value long;

#rule transitive-membership:
#    when {
#        ($parent: $e1, $member: $e2) isa! $membership;
#        ($parent: $e2, $member: $e3) isa! $membership;
#        $membership sub membership;
#        $membership relates $parent, relates $member;
#    } then {
#        ($parent: $e1, $member: $e3) isa $membership;
#    };

rule transitive-membership-groups:
when {
        (group: $p, member: $t) isa group-membership;
        (group: $t, member: $m) isa group-membership;
} then {
        (group: $p, member: $m) isa group-membership;
};


rule transitive-membership-sets:
when {
        (set: $p, member: $t) isa set-membership;
        (set: $t, member: $m) isa set-membership;
} then {
        (set: $p, member: $m) isa set-membership;
};


rule transitive-membership-collections:
when {
        (collection: $p, member: $t) isa collection-membership;
        (collection: $t, member: $m) isa collection-membership;
} then {
        (collection: $p, member: $m) isa collection-membership;
};

# Hack: Create rule to force accesses to be a separate concludable.
rule dummy-access-to-make-concludable:
when {
    $dobj isa object, has name $d1; $d1 = "dummy"; $d1 != "dummy";
    $dact isa action, has name $d2; $d2 = "dummy"; $d2 != "dummy";
} then {
 (object: $dobj, action: $dact) isa access;
};

#rule transitive-object-access:
#    when {
#        (collection: $c1, member: $c2) isa collection-membership;
#        $c1 isa! $c1-type;
#        $c2 isa! $c2-type;
#        $c1-type is $c2-type;
#        (object: $c1, action: $a) isa access;
#    } then {
#        (object: $c2, action: $a) isa access;
#    };
#
#rule transitive-action-access:
#    when {
#        (set: $s, member: $a) isa set-membership;
#        (object: $o, action: $s) isa access;
#    } then {
#        (object: $o, action: $a) isa access;
#    };

rule subject-permission-inheritance:
    when {
        $s isa subject;
        (group: $g, member: $s) isa group-membership;
        (subject: $g, access: $ac) isa permission;
    } then {
        (subject: $s, access: $ac) isa inherited-permission;
    };

rule object-permission-inheritance:
    when {
        $o isa object;
        (collection: $c, member: $o) isa collection-membership;
        $ac-c(object: $c, action: $a) isa access;
        $ac-o(object: $o, action: $a) isa access;
        (subject: $s, access: $ac-c) isa permission;
    } then {
        (subject: $s, access: $ac-o) isa inherited-permission;
    };

rule action-permission-inheritance:
    when {
        $a isa action;
        (set: $se, member: $a) isa set-membership;
        $ac-s(object: $o, action: $se) isa access;
        $ac-a(object: $o, action: $a) isa access;
        (subject: $s, access: $ac-s) isa permission;
    } then {
        (subject: $s, access: $ac-a) isa inherited-permission;
    };

rule segregation-violation-detection:
    when {
        $po(action: $a1, action: $a2) isa segregation-policy;
        $ac1(object: $o, action: $a1) isa access;
        $ac2(object: $o, action: $a2) isa access;
        $p1(subject: $s, access: $ac1) isa permission;
        $p2(subject: $s, access: $ac2) isa permission;
    } then {
        (subject: $s, object: $o, policy: $po) isa segregation-violation;
    };

rule permission-maximisation-violation-detection:
    when {
        $p-d(subject: $s, access: $ac) isa direct-permission;
        $p-i(subject: $s, access: $ac) isa inherited-permission;
    } then {
        (permission: $p-d, permission: $p-i) isa permission-maximisation-violation;
    };

#rule group-maximisation-violation-detection:
#    when {
#        $g1 isa user-group;
#        $g2 isa user-group;
#        not {
#            (permitted-subject: $g1, permitted-access: $ac) isa permission;
#            not { (subject: $g2, access: $ac) isa permission; };
#            not { (group: $g1, member: $s) isa group-membership; };
#            (group: $g2, member: $s) isa group-membership;
#        };
#    } then {
#        (group: $g1, group: $g2) isa group-maximisation-violation;
#    };

#rule group-maximisation-violation-detection:
#    when {
#        $g1 isa user-group;
#        $g2 isa user-group;
#        {
#            not { (permitted-subject: $g1, permitted-access: $ac) isa permission; };
#        } or {
#            (subject: $g2, access: $ac) isa permission;
#        } or {
#            (group: $g1, member: $s) isa group-membership;
#        } or {
#            not { (group: $g2, member: $s) isa group-membership; };
#        };
#    } then {
#        (group: $g1, group: $g2) isa group-maximisation-violation;
#    };

rule automatic-permission-invalidity:
    when {
        $po(action: $a1, action: $a2) isa segregation-policy;
        $ac1(object: $o, action: $a1) isa access;
        $ac2(object: $o, action: $a2) isa access;
        $p1(subject: $s, access: $ac1) isa permission;
        $p2(subject: $s, access: $ac2) isa permission;
    } then {
        $p1 has validity false;
    };

rule automatic-permission-validity:
    when {
        $p isa permission;
        not {
            $p has validity false;
        };
    } then {
        $p has validity true;
    };
